<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="member">
	<!-- 회원조회 -->
	<select id="selectOneMember"  parameterType="m" resultType="m">
		select member_no as memberNo,
			   email,
			   member_pw as memberPw,
			   member_nick as memberNick,
			   gender,
			   address,
			   intro,
			   hobby1,
			   hobby2,
			   hobby3,
			   filename,
			   filepath,
			   warning_count as warningCount,
			   grade,
			   enroll_date as enrollDate,
			   last_date as lastDate,
			   age,
			   join_method as joinMethod
		from member 
		<if test="email != null">
			where email = #{email} 
		</if>
		<if test="memberPw != null">
			and member_pw=#{memberPw}
		</if>
		<if test="email == null and memberNick != null">
			where member_nick=#{memberNick}
		</if>
	</select>
	<!-- 회원가입 -->
	<insert id="insertMember" parameterType="m">
		insert into member values (member_seq.nextval, #{email}, #{memberPw}, #{memberNick}, #{gender}, #{address}, #{intro}, #{hobby1}, #{hobby2}, #{hobby3},  #{filename}, #{filepath}, 0, 2, to_char(sysdate, 'YYYY-MM-DD'), to_char(sysdate, 'YYYY-MM-DD'), #{age}, #{joinMethod})
	</insert>
	<!-- 전체회원 select -->
	<select id="selectAllMember" parameterType="map" resultType="m">
		select * from (select rownum as sort, m.* from (select member_no as memberNo, email,member_pw as memberPw,member_nick as memberNick,gender,address,intro,hobby1,hobby2,hobby3,grade,warning_count as warningCount, filename,filepath,enroll_date as enrollDate,last_date as lastDate, age from member where grade=2 order by enroll_date)m)where sort between #{start} and #{end}
	</select>
	<update id="updateLastdate" parameterType="map">
		update member set last_date=to_char(sysdate, 'YYYY-MM-DD') where email=#{email}
	</update>
	<!-- 전체회원 수 -->
	<select id="memberCount" resultType="int">
		select count(*) from member
	</select>
	<!-- 회원에서 관리자로 업그레이드 -->  
	<update id="updateGrade" parameterType="map">
		update member set grade=1 where member_no in
		<foreach collection="array" item="memberNo" open="(" close=")" separator=",">
			#{memberNo}
		</foreach>
	</update>
	<!-- 클릭한 회원 삭제 -->
	<delete id="deleteMember" parameterType="string">
		delete from member where member_no=#{memberNo}
	</delete>
	<!-- 이용제한이 끝난 회원 등급을 2로 되돌림 -->
	<update id="updateEndRestMember">
		update member set grade=2 where email in ((select rest_email from restriction where end_date &lt; to_char(sysdate,'yyyy-mm-dd')))
	</update>
	<!-- 아이디나 이메일로  회원 조회-->
	<select id="selectUser" parameterType="string" resultType="m">
		select member_no as memberNo,
			   email,
			   member_pw as memberPw,
			   member_nick as memberNick,
			   gender,
			   address,
			   intro,
			   hobby1,
			   hobby2,
			   hobby3,
			   filename,
			   filepath,
			   warning_count as warningCount,
			   grade,
			   enroll_date as enrollDate,
			   last_date as lastDate,
			   age,
			   join_method as joinMethod
		from member where email=#{user} or member_nick=#{user}
	</select>
	<!-- 친구 여부 조회 -->
	<select id="selectFriend" parameterType="f" resultType="f">
		select 
			friend_no as friendNo,
			sender,
			receiver,
			accept,
			acc_date as accDate
		from friend where (sender=#{sender} and receiver=#{receiver}) or (sender=#{receiver} and receiver=#{sender})
	</select>
	<!-- 친구 리스트 -->
	<select id="selectFriendList" parameterType="string" resultType="m">		
		select 
			member_nick as memberNick,
			filepath,
			intro
		from member where member_nick in (select receiver from friend where sender=#{value} and accept='Y')
		union
		select 
			member_nick as memberNick,
			filepath,
			intro
		from member where member_nick in (select sender from friend where receiver=#{value} and accept='Y')
	</select>
	<!-- 요청 수락 대기중인 친구 리스트 -->
	<select id="selectPendingList" parameterType="string" resultType="m">
		select 
			member_nick as memberNick,
			filepath,
			intro
		from member where member_nick in (select receiver from friend where sender=#{value} and accept='N')
	</select>
	<!-- 요청이 온 친구 리스트 -->
	<select id="selectFriendRequest" parameterType="string" resultType="m">
		select 
			member_nick as memberNick,
			filepath,
			intro
		from member where member_nick in (select sender from friend where receiver=#{value} and accept='N')
	</select>
	<!-- 친구 요청 갯수 -->
	<select id="friendRequestCount" parameterType="string" resultType="int">
		select 
			count(*)
		from friend where accept='N' and receiver=#{memberNick}
	</select>
	<!-- 친구 등록 -->
	<insert id="insertFriend" parameterType="f">
		insert into friend values (friend_seq.nextval, #{sender}, #{receiver}, 'N', to_char(sysdate, 'YYYY-MM-DD'))
	</insert>
	<!-- 친구 수락 -->
	<update id="updateFriend" parameterType="f">
		update friend set accept='Y', acc_date=to_char(sysdate, 'YYYY-MM-DD') where sender=#{sender} and receiver=#{receiver}
	</update>
	<!-- 비밀번호 찾기용 비밀번호 변경 -->
	<update id="updatePw" parameterType="m">
		update member set member_pw=#{memberPw} where email=#{email}
	</update>
	<!-- 회원정보 변경 -->
	<update id="updateMember" parameterType="m">
		update member set member_nick=#{memberNick}, gender=#{gender}, address=#{address}, intro=#{intro}, hobby1=#{hobby1}, hobby2=#{hobby2}, hobby3=#{hobby3}, age=#{age}, filename=#{filename}, filepath=#{filepath} where email=#{email}
	</update>
</mapper>
