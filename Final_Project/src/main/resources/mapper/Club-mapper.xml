<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="club">
<!-- 회원이 속한 클럽 출력 -->
<select id="memberClubList"  parameterType="m" resultType="c">
	SELECT
		CLUB_NO as clubNo,
		CLUB_CG  as clubCg,            
		CLUB_NAME  as clubName,
		CLUB_INTRO  as clubIntro,
		CLUB_OPENER  as clubOpener,        
		fileName,  
		filePath, 
		CLUB_RATING as clubRating,
		ISPUBLIC,
		ENROLL_DATE as enrollDate,
		LAST_DATE as lastDate,
		WARNING_COUNT as warningCount
	FROM CLUB WHERE 
	CLUB_NO IN(SELECT CLUB_NO FROM CLUB_MEMBER WHERE CLUB_NICK= #{memberNick}) OR CLUB_OPENER=#{memberNick}
</select>

<!-- 회원이 작성한 클럽의 게시물 -->
<!-- <select id="memberClubPosts" parameterType="m" resultType="b">
SELECT 
    A.board_no as boardNo,
    A.club_no as clubNo,
    A.board_cg as boardCg,
    A.BOARD_WRITER as boardWriter,
    A.board_title as boardTitle,
    A.board_content as boardContent,
    A.fileName,
    A.filePath,
    A.board_views as boardViews,
    A.BOARD_good as cbGood,
    A.enroll_date as enrollDate,
    C.CLUB_NAME AS clubName 
FROM CLUB_BOARD A,CLUB C 
WHERE C.CLUB_NO = A.CLUB_NO 
AND 
C.CLUB_NO IN(SELECT CLUB_NO FROM CLUB_MEMBER WHERE CLUB_NICK=#{memberNick})
ORDER BY A.ENROLL_DATE DESC
</select> -->

<!-- 회원이 작성한 클럽의 게시물 더보기형식(10개씩) -->
<!-- changDate가 0 이면 전체출력/아니면 그 수만큼 날짜 빼서 조회 -->
<select id="phtoMore" parameterType="map" resultType="b">
SELECT * FROM
(select rownum as rnum,p.*from
(SELECT 
    B.BOARD_NO  as boardNo, 
    C.CLUB_NAME as clubName,
    
    B.club_no as clubNo,
    B.board_cg as boardCg,
    B.BOARD_TITLE as boardTitle,
    B.BOARD_WRITER as boardWriter,
    B.board_content as boardContent,
    B.fileName,
    B.filePath,
    B.board_views as boardViews,
    B.BOARD_good as cbGood,
    B.enroll_date as enrollDate,
    
    (SELECT COUNT(*) FROM BOARD_LIKE BL WHERE BL.BOARD_NO = B.BOARD_NO) AS totalCount,
    DECODE(
        (SELECT COUNT(*) FROM BOARD_LIKE BL2 WHERE BL2.BOARD_NO = B.BOARD_NO AND BL2.MEMBER_NICK=#{m}),
        1,
        'likeOn',
        'likeOff'
    ) AS likeCheck
FROM CLUB_BOARD B,CLUB C
WHERE B.CLUB_NO = C.CLUB_NO
AND C.CLUB_NO IN(
SELECT CLUB_NO FROM CLUB CB WHERE CLUB_NO IN(select club_NO from club_member where club_nick=#{m}) OR CLUB_OPENER=#{m})
and (board_title like '%'||#{searchCon}||'%' or board_content like '%'||#{searchCon}||'%')
<if test="changeDate != 0">
and a.enroll_date between to_char(sysdate-#{changeDate},'yyyy-mm-dd') and to_char(sysdate,'YYYY-MM-DD')	
</if> 
ORDER BY B.ENROLL_DATE DESC)P) WHERE RNUM BETWEEN #{start} AND #{end}
</select>


<!-- 전체게시물 수 파악 -->
<!-- changeDate값에 따라 게시물 조회 -->
<select id="totalCount" parameterType="map" resultType="int">
SELECT 
    count(*)
FROM CLUB_BOARD A,CLUB C 
WHERE C.CLUB_NO = A.CLUB_NO and (board_title like '%'||#{searchCon}||'%' or board_content like '%'||#{searchCon}||'%')
AND 
C.CLUB_NO IN(SELECT CLUB_NO FROM CLUB_MEMBER WHERE CLUB_NICK=#{memberNick})
<if test="changeDate != 0">
AND
a.enroll_date BETWEEN to_char(sysdate-#{changeDate},'YYYY-MM-DD') and to_char(sysdate,'YYYY-MM-DD')
</if> 
</select>

<!-- 게시물 등록 -->
<insert id="insertPost" parameterType="b">
insert into club_board values(
    CB_SEQ.NEXTVAL,
    #{clubNo},
    #{boardCg},
    #{boardWriter},
    #{boardTitle},
    #{boardContent},
    null,
    null,
    1,
    1,
    to_char(sysdate,'yyyy-mm-dd'))
</insert>

<!-- 최신게시글 no를 찾아내기 위한 쿼리 -->
<select id="selectBoardNo" resultType="int">
	select max(board_no) from club_board
</select>

<!-- 파일추가하기위한 쿼리 -->
<update id="insertFile" parameterType="b">
	update club_board set 
		fileName=#{fileName},
		filePath=#{filePath}
	where board_no=#{boardNo}
</update>

<!-- 마이클럽 차트(회원이 속한 클럽별 게시물갯수) -->
<select id="selectClubPostCount" parameterType="m" resultType="cc">
SELECT 
    club_no,
    count(*) as clubPostCount,
    (SELECT CLUB_NAME FROM CLUB C WHERE C.CLUB_NO = CB.CLUB_NO) AS CLUBNAME
FROM CLUB_board CB 
WHERE CLUB_NO IN(SELECT 
    CLUB_NO 
FROM CLUB CB 
WHERE CLUB_NO IN(select club_NO from club_member where club_nick=#{memberNick}) OR CLUB_OPENER=#{memberNick} GROUP BY CLUB_NO) GROUP BY CLUB_NO
</select>


<!-- 나에게 온 읽지않은 쪽지갯수 확인 -->
<select id="myMessage" parameterType="m" resultType="int">
select 
	count(*) 
from direct_message where receiver=#{memberNick} and read_status='N'
</select>

<select id="viewClubList" parameterType="int" resultType="c">
	SELECT
		CLUB_NO as clubNo,
		CLUB_CG  as clubCg,            
		CLUB_NAME  as clubName,
		CLUB_INTRO  as clubIntro,
		CLUB_OPENER  as clubOpener,        
		FILENAME,  
		FILEPATH, 
		CLUB_RATING as clubRating,
		ISPUBLIC,
		ENROLL_DATE as enrollDate,
		LAST_DATE as lastDate,
		WARNING_COUNT as warningCount
	FROM CLUB WHERE club_cg = #{cgNo}
</select>

<insert id="createClub" parameterType="c">
	insert into club values(
		club_seq.nextval,
		#{clubCg},
		#{clubName},
		#{clubIntro},
		#{clubOpener},
		#{fileName},
		#{filePath},
		0,
		#{ispublic},
		to_char(sysdate,'yyyy-mm-dd'),
		to_char(sysdate,'yyyy-mm-dd'),
		0
	)
</insert>
<!-- 전체클럽 select -->
<select id="selectAllClub" parameterType="map" resultType="c">
	select * from (select rownum as sort, c.* from (select club_no as clubNo, club_cg as clubCg, club_name as clubName, club_intro as clubIntro, club_opener as clubOpener, fileName, filePath, club_rating as clubRating, ispublic, enroll_date as enrollDate, last_date as lastDate, warning_count as warningCount,(select cg_name from category where cg_no = club_cg) as cgName from club
	<if test="keyword != '' and category eq 'name'">
		where club_name like '%'||#{keyword}||'%'
	</if>
	<if test="keyword != '' and category eq 'hobby'">
		where club_cg in (select cg_no from category where cg_name like '%'||#{keyword}||'%') 
	</if>
	 order by
	<choose>
		<when test="sort eq 1">enroll_date desc</when>
		<when test="sort eq 2">enroll_date</when>
		<when test="sort eq 3">warning_count desc</when>
		<otherwise>last_date</otherwise>
	</choose>
	 )c)where sort between #{start} and #{end}
</select>
<select id="clubCount" resultType="int">
	select count(*) from club
	<if test="keyword != '' and category eq 'name'">
		where club_name like '%'||#{keyword}||'%'
	</if>
	<if test="keyword != '' and category eq 'hobby'">
		where club_cg in (select cg_no from category where cg_name like '%'||#{keyword}||'%') 
	</if>
</select>
<!-- 관리자 클럽 폐지 -->
<delete id="deleteClub" parameterType="int">
	delete from club where club_no=#{clubNo}
</delete>

<!-- 댓글 가져오기 -->
<select id="postMoment" parameterType="int" resultType="ccm">
select
	A.CC_NO AS ccNo,
	A.board_no as boardNo,
	A.cc_writer as ccWriter,
	A.cc_content as ccContent,
	A.cc_cg as ccCG,
	A.cc_ref as ccREF,
	A.cc_good as ccGOOD,
    B.filepath
from CLUB_COMMENT A, MEMBER B WHERE A.CC_WRITER = B.MEMBER_NICK AND BOARD_NO=#{boardNo}
</select>
<!-- 댓글등록 -->
<insert id="insertComent" parameterType="map">
INSERT INTO CLUB_COMMENT VALUES(
    CC_SEQ.NEXTVAL,
    #{boardNo},
    #{m.memberNick},
   	#{comentCon},
    0,
    NULL,
    0)
</insert>

<!-- 댓글삭제 -->
<delete id="deleteMent" parameterType="int">
DELETE FROM CLUB_COMMENT WHERE CC_NO=#{mentNo}
</delete>

<!-- 게시물 좋아요 -->
<update id="postLike" parameterType="map">
insert into board_like values(
    #{boardMoment},
    #{m.memberNick})
</update>
<!-- 클럽이 활동한 경우 최종 활동일 update해주기 clubNo를 넘겨줄 때 -->
<update id="updateClubLastDate" parameterType="c">
	update club set last_date=to_char(sysdate,'yyyy-mm-dd') where club_no=#{clubNo}
</update>
<!-- 클럽이 활동한 경우 최종 활동일 update해주기 clubNo를 넘겨줄 때 -->
<update id="updateClubLastDateBoardNo" parameterType="int">	
	update club set last_date=to_char(sysdate,'yyyy-mm-dd') where club_no=(select club_no from club_board where board_no=#{boardNo})
</update>
<delete id="postDeletLike" parameterType="map">
DELETE FROM board_like WHERE BOARD_NO=#{boardMoment} and MEMBER_NICK=#{m.memberNick}
</delete>
</mapper>





















